// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagServeClient is the client API for TagServe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagServeClient interface {
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagReply, error)
}

type tagServeClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServeClient(cc grpc.ClientConnInterface) TagServeClient {
	return &tagServeClient{cc}
}

func (c *tagServeClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*GetTagReply, error) {
	out := new(GetTagReply)
	err := c.cc.Invoke(ctx, "/tag.TagServe/getTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServeServer is the server API for TagServe service.
// All implementations must embed UnimplementedTagServeServer
// for forward compatibility
type TagServeServer interface {
	GetTag(context.Context, *GetTagRequest) (*GetTagReply, error)
	mustEmbedUnimplementedTagServeServer()
}

// UnimplementedTagServeServer must be embedded to have forward compatible implementations.
type UnimplementedTagServeServer struct {
}

func (UnimplementedTagServeServer) GetTag(context.Context, *GetTagRequest) (*GetTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedTagServeServer) mustEmbedUnimplementedTagServeServer() {}

// UnsafeTagServeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServeServer will
// result in compilation errors.
type UnsafeTagServeServer interface {
	mustEmbedUnimplementedTagServeServer()
}

func RegisterTagServeServer(s grpc.ServiceRegistrar, srv TagServeServer) {
	s.RegisterService(&TagServe_ServiceDesc, srv)
}

func _TagServe_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServeServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tag.TagServe/getTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServeServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagServe_ServiceDesc is the grpc.ServiceDesc for TagServe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagServe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.TagServe",
	HandlerType: (*TagServeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getTag",
			Handler:    _TagServe_GetTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/tag.proto",
}
